import { NextApiRequest, NextApiResponse } from 'next';
import { decode } from 'jsonwebtoken';
import pool from '../../../../lib/db'; // ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n ƒë√∫ng
import { geminiModel } from '../../../../lib/gemini'; // ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n ƒë√∫ng

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') {
    return res.status(405).json({ message: 'Method not allowed' });
  }

  const token = req.cookies.token;
  if (!token) {
    return res.status(401).json({ message: 'Unauthorized' });
  }

  try {
    const decodedToken = decode(token) as { role: string; id: string } | null;
    if (!decodedToken || !['TRUONGBAN', 'GIAOVIEN'].includes(decodedToken.role)) {
      return res.status(403).json({ message: 'Forbidden' });
    }

    const client = await pool.connect();
    try {
      // Fetch plans data
      const plansQuery = `
        SELECT
          ep.id,
          ep.plan_name as title,
          ep.description,
          ep.start_date,
          ep.end_date,
          ep.created_at,
          u.full_name as created_by,
          COUNT(DISTINCT es.id) as total_stages,
          COUNT(DISTINCT a.id) as total_assignments,
          COUNT(DISTINCT CASE WHEN a.status = 'completed' THEN a.id END) as completed_assignments
        FROM enrollment_plans ep
        LEFT JOIN users u ON ep.created_by = u.id
        LEFT JOIN enrollment_stages es ON es.plan_id = ep.id
        LEFT JOIN assignments a ON a.stage_id = es.id
        GROUP BY ep.id, ep.plan_name, ep.description, ep.start_date, ep.end_date, ep.created_at, u.full_name
        ORDER BY ep.created_at DESC
      `;
      const plansResult = await client.query(plansQuery);

      // Prepare data for the report
      const reportData = plansResult.rows.map(plan => {
        const totalAssignments = parseInt(plan.total_assignments);
        const completedAssignments = parseInt(plan.completed_assignments);
        const completionRate = totalAssignments > 0 ? ((completedAssignments / totalAssignments) * 100).toFixed(1) : '0.0';

        return {
          tenKeHoach: plan.title,
          moTa: plan.description,
          thoiGianBatDau: new Date(plan.start_date).toLocaleDateString('vi-VN'),
          thoiGianKetThuc: new Date(plan.end_date).toLocaleDateString('vi-VN'),
          // createdBy: plan.created_by, // B·ªè tr∆∞·ªùng n√†y n·∫øu kh√¥ng mu·ªën hi·ªÉn th·ªã trong b√°o c√°o cu·ªëi c√πng
          tongGiaiDoan: parseInt(plan.total_stages),
          tongNhiemVu: totalAssignments,
          nhiemVuHoanThanh: completedAssignments,
          tyLeHoanThanh: `${completionRate}%`
        };
      });

      // Th√™m c√°c ch·ªâ s·ªë t·ªïng quan
      const totalPlans = reportData.length;
      const totalCompletedAssignmentsOverall = reportData.reduce((sum, plan) => sum + plan.nhiemVuHoanThanh, 0);
      const totalAssignmentsOverall = reportData.reduce((sum, plan) => sum + plan.tongNhiemVu, 0);
      const overallCompletionRate = totalAssignmentsOverall > 0 ? ((totalCompletedAssignmentsOverall / totalAssignmentsOverall) * 100).toFixed(1) : '0.0';

      // Ph√¢n lo·∫°i k·∫ø ho·∫°ch ƒë·ªÉ b√°o c√°o chi ti·∫øt h∆°n
      const keHoachDangTrienKhai = reportData.filter(plan => {
        // Chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng ng√†y th√°ng t·ª´ 'DD/MM/YYYY' sang 'YYYY-MM-DD' ƒë·ªÉ Date object parse ƒë√∫ng
        const [day, month, year] = plan.thoiGianKetThuc.split('/');
        const endDate = new Date(`${year}-${month}-${day}`);
        return endDate >= new Date(); // K·∫ø ho·∫°ch ch∆∞a k·∫øt th√∫c
      });
      const keHoachDaHoanThanh = reportData.filter(plan => {
        const [day, month, year] = plan.thoiGianKetThuc.split('/');
        const endDate = new Date(`${year}-${month}-${day}`);
        return endDate < new Date(); // K·∫ø ho·∫°ch ƒë√£ k·∫øt th√∫c
      });

      // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu b·∫£ng th√†nh chu·ªói Markdown ƒë·ªÉ Gemini d·ªÖ x·ª≠ l√Ω
      const generateTableMarkdown = (plans: typeof reportData, type: 'current' | 'completed') => {
        let header = '';
        let rows = '';

        if (plans.length === 0) {
            return "Kh√¥ng c√≥ d·ªØ li·ªáu cho ph·∫ßn n√†y.";
        }

        if (type === 'current') {
          header = '| STT | T√™n k·∫ø ho·∫°ch | Th·ªùi gian | Giai ƒëo·∫°n | Nhi·ªám v·ª• | Ti·∫øn ƒë·ªô |\n|-----|--------------|------------|------------|----------|----------|';
          rows = plans.map((p, index) =>
            `| ${index + 1} | ${p.tenKeHoach} | ${p.thoiGianBatDau} - ${p.thoiGianKetThuc} | ${p.tongGiaiDoan} | ${p.nhiemVuHoanThanh}/${p.tongNhiemVu} | ${p.tyLeHoanThanh} |`
          ).join('\n');
        } else { // completed
          header = '| STT | T√™n k·∫ø ho·∫°ch | Th·ªùi gian | Giai ƒëo·∫°n | Nhi·ªám v·ª• | K·∫øt qu·∫£ |\n|-----|--------------|------------|------------|----------|----------|';
          rows = plans.map((p, index) =>
            `| ${index + 1} | ${p.tenKeHoach} | ${p.thoiGianBatDau} - ${p.thoiGianKetThuc} | ${p.tongGiaiDoan} | ${p.nhiemVuHoanThanh}/${p.tongNhiemVu} | ${p.tyLeHoanThanh} |`
          ).join('\n');
        }
        return `${header}\n${rows}`;
      };

      const currentPlansTable = generateTableMarkdown(keHoachDangTrienKhai, 'current');
      const completedPlansTable = generateTableMarkdown(keHoachDaHoanThanh, 'completed');


      // Generate report content using Gemini
      const prompt = `T·∫°o m·ªôt b√°o c√°o chuy√™n nghi·ªáp v√† chi ti·∫øt v·ªÅ c√°c k·∫ø ho·∫°ch tuy·ªÉn sinh c·ªßa UTC2.
H√£y tr√¨nh b√†y v·ªõi phong c√°ch chuy√™n nghi·ªáp, d·ªÖ ƒë·ªçc v√† tr·ª±c quan.

# üìã B√ÅO C√ÅO K·∫æ HO·∫†CH TUY·ªÇN SINH
*Th·ªùi gian: ${new Date().toLocaleDateString('vi-VN', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' })}*

---

## I. T·ªïng Quan Hi·ªáu Su·∫•t

### 1. Ch·ªâ s·ªë quan tr·ªçng
> **T·ªïng s·ªë k·∫ø ho·∫°ch**: ${totalPlans}
> **T·ªïng s·ªë nhi·ªám v·ª•**: ${totalAssignmentsOverall}
> **T·ªïng s·ªë nhi·ªám v·ª• ƒë√£ ho√†n th√†nh**: ${totalCompletedAssignmentsOverall}
> **T·ª∑ l·ªá ho√†n th√†nh t·ªïng th·ªÉ**: ${overallCompletionRate}%
> **K·∫ø ho·∫°ch ƒëang th·ª±c hi·ªán**: ${keHoachDangTrienKhai.length}

### 2. Ph√¢n t√≠ch t·ªïng th·ªÉ
D·ª±a tr√™n c√°c ch·ªâ s·ªë tr√™n, h√£y nh·∫≠n ƒë·ªãnh chung v·ªÅ hi·ªáu su·∫•t c√°c k·∫ø ho·∫°ch tuy·ªÉn sinh. N√™u b·∫≠t c√°c ƒëi·ªÉm m·∫°nh v√† nh·ªØng lƒ©nh v·ª±c c·∫ßn c·∫£i thi·ªán.

---

## II. Chi Ti·∫øt K·∫ø Ho·∫°ch

### 1. K·∫ø ho·∫°ch ƒëang tri·ªÉn khai
D∆∞·ªõi ƒë√¢y l√† danh s√°ch chi ti·∫øt c√°c k·∫ø ho·∫°ch ƒëang ƒë∆∞·ª£c tri·ªÉn khai:
${currentPlansTable}
H√£y ph√¢n t√≠ch ti·∫øn ƒë·ªô c·ªßa c√°c k·∫ø ho·∫°ch n√†y. K·∫ø ho·∫°ch n√†o ƒëang ƒëi ƒë√∫ng h∆∞·ªõng, k·∫ø ho·∫°ch n√†o c√≥ nguy c∆° ch·∫≠m tr·ªÖ v√† t·∫°i sao?

### 2. K·∫ø ho·∫°ch ƒë√£ ho√†n th√†nh
D∆∞·ªõi ƒë√¢y l√† danh s√°ch chi ti·∫øt c√°c k·∫ø ho·∫°ch ƒë√£ ho√†n th√†nh:
${completedPlansTable}
H√£y ƒë√°nh gi√° k·∫øt qu·∫£ c·ªßa c√°c k·∫ø ho·∫°ch n√†y. K·∫ø ho·∫°ch n√†o ƒë·∫°t m·ª•c ti√™u xu·∫•t s·∫Øc, k·∫ø ho·∫°ch n√†o c·∫ßn r√∫t kinh nghi·ªám?

---

## III. ƒêi·ªÉm N·ªïi B·∫≠t v√† Th√°ch Th·ª©c

### 1. Th√†nh c√¥ng
N√™u b·∫≠t c√°c th√†nh c√¥ng ƒë√°ng ch√∫ √Ω t·ª´ c√°c k·∫ø ho·∫°ch ƒë√£ ho√†n th√†nh, ch·ªâ ra nh·ªØng y·∫øu t·ªë ƒë√£ d·∫´n ƒë·∫øn th√†nh c√¥ng ƒë√≥ v√† b√†i h·ªçc kinh nghi·ªám c√≥ th·ªÉ √°p d·ª•ng.

### 2. Kh√≥ khƒÉn
Ph√¢n t√≠ch c√°c kh√≥ khƒÉn, v∆∞·ªõng m·∫Øc ƒë√£ g·∫∑p ph·∫£i trong qu√° tr√¨nh tri·ªÉn khai k·∫ø ho·∫°ch. N√™u r√µ nguy√™n nh√¢n v√† t√°c ƒë·ªông c·ªßa ch√∫ng.

---

## IV. ƒê·ªÅ Xu·∫•t & C·∫£i Thi·ªán

### 1. Khuy·∫øn ngh·ªã ng·∫Øn h·∫°n
ƒê∆∞a ra c√°c khuy·∫øn ngh·ªã c·ª• th·ªÉ, kh·∫£ thi ƒë·ªÉ ƒëi·ªÅu ch·ªânh v√† t·ªëi ∆∞u h√≥a c√°c k·∫ø ho·∫°ch ƒëang tri·ªÉn khai, ho·∫∑c gi·∫£i quy·∫øt c√°c v·∫•n ƒë·ªÅ c·∫•p b√°ch.

### 2. Chi·∫øn l∆∞·ª£c d√†i h·∫°n
ƒê·ªÅ xu·∫•t c√°c chi·∫øn l∆∞·ª£c ph√°t tri·ªÉn d√†i h·∫°n nh·∫±m n√¢ng cao hi·ªáu qu·∫£ t·ªïng th·ªÉ c·ªßa c√¥ng t√°c tuy·ªÉn sinh, bao g·ªìm c·∫£i ti·∫øn quy tr√¨nh, ƒë√†o t·∫°o nh√¢n s·ª±.

---

**Y√™u c·∫ßu tr√¨nh b√†y b√°o c√°o:**
1.  S·ª≠ d·ª•ng Markdown ƒë·ªÉ ƒë·ªãnh d·∫°ng v·ªõi c√°c ti√™u ƒë·ªÅ (heading #, ##, ###) r√µ r√†ng.
2.  ƒê·∫£m b·∫£o c√°c b·∫£ng ƒë∆∞·ª£c cƒÉn ch·ªânh ƒë·∫πp m·∫Øt.
3.  ƒê√¢y l√† b√°o c√°o h√†nh ch√≠nh v√¨ v·∫≠y h√£y l√†m theo nh·ªØng g√¨ b·∫°n bi·∫øt v·ªÅ b√°o c√°o h√†nh ch√≠nh
4.  S·ª≠ d·ª•ng blockquote (>) cho c√°c ch·ªâ s·ªë quan tr·ªçng.
5.  S·ª≠ d·ª•ng in ƒë·∫≠m (**) cho c√°c s·ªë li·ªáu v√† nh·∫≠n ƒë·ªãnh quan tr·ªçng.
6.  Th√™m ƒë∆∞·ªùng k·∫ª ngang (---) gi·ªØa c√°c ph·∫ßn ch√≠nh.
7.  S·ª≠ d·ª•ng bullet points (-) cho danh s√°ch ph√¢n t√≠ch.
8.  K·∫øt th√∫c b·∫±ng t·ªïng k·∫øt v√† khuy·∫øn ngh·ªã c·ª• th·ªÉ, nh·∫•n m·∫°nh t√≠nh kh·∫£ thi v√† t·∫ßm quan tr·ªçng.
9.  T·∫≠p trung v√†o n·ªôi dung kh√¥ng n√≥i nh·ªØng c√¢u m·ªü ƒë·∫ßu hay k·∫øt th√∫c nh∆∞ "ƒê√¢y l√† b√°o c√°o tuy·ªÉn sinh c·ªßa UTC2" hay "ƒê√¢y l√† b√°o c√°o tuy·ªÉn sinh c·ªßa UTC2"
      `;

      const result = await geminiModel.generateContent(prompt);
      const response = await result.response;
      const reportContent = response.text();

      return res.status(200).json({
        message: 'Report generated successfully',
        report: reportContent,
      });
    } finally {
      client.release();
    }
  } catch (error) {
    console.error('Error generating report:', error);
    return res.status(500).json({ message: 'Error generating report' });
  }
}